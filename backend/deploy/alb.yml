AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Fargate Auto Scaling Web Server with RDS"

Parameters:
  StackName:
    Type: String
  BaseDomainName:
    Type: String
    Description: "The base domain name for the application. Subdomain of
      StackName will be used"
    Default: appalachiancoding.org
  HostedZoneId:
    Type: String
    Default: Z09827882WIF0Q8AI3TUF
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.101.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.102.0/24

Resources:
  # Networking
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue
        Fn::Sub: "${StackName}-vpc-id"
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
  PublicSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue
        Fn::Sub: ${StackName}-public-route-table
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue
        Fn::Sub: "${StackName}-vpc-id"
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
  PublicSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue
        Fn::Sub: ${StackName}-public-route-table
      SubnetId: !Ref PublicSubnet2

  # ALB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTPS access"
      VpcId: !ImportValue
        Fn::Sub: "${StackName}-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref StackName
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 80
      TargetType: ip
      Protocol: HTTP
      VpcId: !ImportValue
        Fn::Sub: "${StackName}-vpc-id"

  # Certifciate
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${StackName}.${BaseDomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "${StackName}.${BaseDomainName}"
          HostedZoneId: !Ref HostedZoneId
  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomainName}."
      Name: !Sub "${StackName}.${BaseDomainName}"
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

Outputs:
  TargetGroup:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${StackName}-alb-tg-arn"
